func subfunc {
   cat #= #cat + "0"
   error(145, "Test error message")
   cat #= #cat + "1"
}

func myfunc str {
  try {
    cat #= "2"
    subfunc()
    cat #= #cat + "3"
  } catch err {
      cat #= #cat + "[\{ErrID(err)}]"
  }
  cat #= #cat + "OOOPS"
  return "myfunc"
}
run str {
  str s
  try {
    s = myfunc()
    error(150, "Wrong error")
  }
  catch err {
    if ErrID(err) == 500 : recover
    if ErrID(err) == 145 : error(57, #cat + ErrText(err))
  }
  error(150, "Skipped error")
  return s
} 
===== [26:28] 20[145]Test error message
func myfunc {
  try {
    int i
    try {
      error(145, "Test error message")
    } catch err {
      i = 10
    }
    error(146, "Skipped error message")
  } catch err {}
  error(147, "Skipped error message")
}
run str {
  myfunc()
  error(148, "Wrong error message")
  return `OK`
} 
===== [5:7] Test error message
run str {
  try {
    mark #= "0"
    error(177, "Test error message")
    mark #= #mark + "1"
  } catch err {
    mark #= #mark + "[\{ErrID(err)}]"
  }
  error(178, "Wrong error message")
  return #mark
} 
===== [4:5] Test error message
run {
  if true? :
}
===== [2:10] function bool(bool) has not been found
run int {
  local mul(int i) int {
    return i*3
  }
  mul(1, b:3)
}
===== [5:13] function doesn't have optional variable b
run int {
  int a
  return (20).(a)
}
===== [3:14] unexpected token, expecting operator
run int {
  int a
  return 20.a
}
===== [3:13] wrong sequence of characters
run int {
  int a
  return a.20
}
===== [3:10] int type is not struct type
run str {
  str s = " StriNg".
}
===== [2:20] unexpected token, expecting operator
run str {
  int i
  str s = `ok`
  try {
    10/i
  }
  catch err {
    s = Format("#%d %s", ErrID(err), ErrText(err))
    recover
    s += `---`
  }
  s += `+++`
  return s
} 
===== #3 divided by zero+++
run {
  try { 10/0 }
  catch err {
     error(100, Format("#%d %s %v", ErrID(err), ErrText(err), ErrTrace(err)))
  }
} 
===== [4:6] #3 divided by zero [trace[Path: Entry:run Func:Div Line:2 Pos:11]]
run str {
  try {
    error(101, `oooops`)
  }
  catch err {
    if ErrID(err) == 250 {
      recover
    }
    if ErrID(err) < 100 {
      retry
    }
  }
  return `ok`
} 
===== [3:5] oooops
run {
  while true { retry }
} 
===== [2:16] 'retry' can only be inside catch
run {
  try { recover }
} 
===== [2:9] 'recover' can only be inside catch
run {
  try { 10/0 }
  catch err {
     ReadFile(`qwert`)
  }
} 
===== [4:6] open qwert: no such file or directory
run str {
  try { 10/0 }
  catch err {
     error(190, "something is wrong")
  }
  return `ok`
} 
===== [4:6] something is wrong
run int {
  int err
  try {}
  catch err {
  }
  return 1
} 
===== [4:9] "err" has already been used as the name of the function, type or variable
run {
  try { }
  catch { }
}
===== [3:9] unexpected token, expecting the name of the identifier
run {
  try { }
  if true :
}
===== [3:3] unexpected token, expecting 'catch'
run {
  try 10 :
}
===== [2:7] unexpected token, expecting {
run {
  go (100, a: 20) {int k = 0} 
}
===== [2:3] there is an unnamed parameter in go statement
run int {
  return go()
} 
===== [3:1] unexpected token, expecting {
func go int {
  return 1
} 
===== [1:6] unexpected token, expecting the name of the identifier
run int {
  local loc(int i) int {
      local loc2 int : return 2
      return i + loc2()
  }
  return loc2()
} 
===== [6:10] function loc2() has not been found
run int {
  local loc(int i) int : 1 + 2
} 
===== [2:31] function must return a value
run int {
  local loc(int i) int : return 3
  return loc(2.34)
} 
===== [3:10] function loc(float) has not been found
run int {
  local loc int : return `2`
  return loc()
} 
===== [2:29] function returns wrong type
run str {
  local locvar(str s, int iarr...) str {
    for v in iarr {
      s += str(v)
    }
    return s 
  }
  return locvar(`1`, 2,3,4) + locvar(`0`)+ locvar(`5`, 6, 7)
} 
===== [2:36] local function cannot have a variadic parameter
run str {
  local loc int : return 2
  return loc()
} 
===== [3:15] function returns wrong type
run {
  local loc1 : 
  local loc1(int i) : 
} 
===== [3:9] loc1 local function has already been defined
run {
  local loc : 
  for i in 1..10 {
    local loc : i+= 2
  }
} 
===== [4:11] loc local function has already been defined
func vars(str a) str {
  str ? a1 a2 
  str a4

  return a4
}
run str {
  return vars(`A`, a4: `23`)
} 
===== [8:28] function doesn't have optional variable a4
func vars(str a) str {
  str ? a1 ?a2 a3
}
run str {
  return vars(`A`)
} 
===== [2:12] unexpected token, expecting the name of the identifier
func my(int a) int {
  int ? i = 10
  return a + i*2
}
run int : return my( i: 9, 11)
===== [5:30] optional parameters must be at the end
func my(int a) int {
  int ? i = 10
  str ? s = `ok`
  return a + i
}
run : my( 8, i: 2, s: `2`, i: 7)
===== [6:28] i optional variable is defined more than one time
func my(int a) int {
  int ? i = 10
  return a + i
}
run : my( 10, i: `ok`)
===== [5:22] i optional variable has different type
func my(int a) {
  int ? i = 10
}
run : my( 20, k: 20)
===== [4:20] function doesn't have optional variable k
func my {
  int i = 10
}
run : my( j: 20)
===== [4:16] function doesn't have optional variable j
fn my(str) int
run {
  my f
  f(`1`, B: `ok`)
} 
===== [4:17] fn variables can't use optional variables
run {
   Print(`ok`, A: `ok`)
} 
===== [2:23] function doesn't have optional variable A
func my {
  if true {
    int ?i = 10
  }
}
run : my()
===== [3:9] optional variable cannot be inside 'run' or nested block
run int {
  int ? i
  return i
}
===== [2:7] optional variable cannot be inside 'run' or nested block
run {
  go :
  go {
    sleep(2000)
  }
  error(99, `main error`)
}
===== [6:3] main error
run {
  thread th
  terminate(th)
}
===== [3:3] invalid thread
run {
  go { 
    error(200, `This is a thread error`)
  }
  sleep(4000)
}
===== [3:5] This is a thread error
run {
  go { 
    sleep(5000)
  }
  sleep(100)
  error(700, `error in run`)
}
===== [6:3] error in run
run {
  go { return 1
  }
}
===== [2:16] function cannot return any value
run {
  go { int i = 1 
  } Println(`OK`)
}
===== [3:5] unexpected token, expecting a new line or }
run str {
  go { int i = 1 
  } return `OK`
}
===== [3:5] unexpected token, expecting a new line or }
run {
  go { 
  } + 25
}
===== [3:5] unexpected token, expecting a new line or }
run {
  float f 
  f = go { 
  }
}
===== [3:5] function Assign(float, thread) has not been found
run {
  str s = go { 
    Println(10)
  }
}
===== [2:9] function Assign(str, thread) has not been found
func my(int i) str : return str(i)
run str {
  return #my(20)
}
===== [3:13] unexpected token, expecting operator
run str {
  return #10
}
===== [2:11] unexpected token, expecting the name of the identifier
run {
  int b
  return ##b
}
===== [3:10] function Ctx(int) has not been found
run {
  str b
  return 1 + ##b
}
===== [3:12] function Add(int, str) has not been found
run {
  go 10
}
===== [2:6] unexpected token, expecting {
fn my(str) int
run {
  my myi
  myi(3)
}
===== [4:3] fn type my is different from (int)
fn my(int) int
run {
  my myi
  myi(3, 4)
}
===== [4:3] fn type my is different from (int, int)
func empty : 
run {
  int i = empty()
}
===== [3:9] function Assign(int, ...) has not been found
fn my 
func do : 
run {
  my myi = &do.my 
  int i = myi()
}
===== [5:9] function Assign(int, ...) has not been found
fn my 
run {
  my iadd 
  iadd()
}
===== [4:3] fn variable has not been defined
fn my
func sub {}
run {
  my iadd 
  iadd = &sub.my + 1
}
===== [5:18] function Add(my, int) has not been found
fn my(int) int
fn mys(str) int
func sub(str s) int {return 1}
run {
  my iadd = &sub.mys
}
===== [5:11] can't assign mys to my
fn my(int) int
func sub(int s) int {return 1}
run {
  my iadd 
  iadd += &sub.my
}
===== [5:8] function AssignAdd(my, my) has not been found
fn my( int, str ) int
func my1( int i, str s ) int : return 5
run {
  &my1.my()
  `ssss`()
  &my1.my(10, `s`)
}
===== [4:3] address of function must be defined as &name.type
fn my( int, str ) int
fn my1( int, str ) int 
func my2(int i, my f ) int : return 10
run {
  my1 fm
  my2(1, fm)
}
===== [6:3] function my2(int, my1) has not been found
fn my( int, str ) int 
func my2(int i, int s ) int : return 10
run {
  &my2.my
}
===== [4:4] function my2(int, str) has not been found
fn my(int,int) int
func t(int a, int b...) int : return 0
run int {
  my f = &t.my
  return f(10, 20)
}
===== [4:10] fn variable can't be assigned to a variadic function
fn my(int, int) int
func t(int a, int c, float b...) int {
  return a+c
}
run int {
  my f = &t.my
  return f(10, 20)
}
===== [6:10] fn variable can't be assigned to a variadic function
fn ls(str) int
run int {
  ls ils = &Len.ls
  return ils(`string строка`)
}
===== [3:12] fn variable can't be assigned to a built-in function
fn my(int,int...)int : return 0
===== [1:14] unexpected token, expecting type
fn my(int,) int : return 0
===== [1:11] unexpected token, expecting type
fn my(ty)
===== [1:7] unexpected token, expecting type
func my1 int : return 0
fn my 
run : &my1.my
===== [3:7] function my1 and my fn type return different types
run {
  &myfunc.int
}
===== [2:3] type int is not a fn type
run {
  &myfunc.int.int
}
===== [2:3] address of function must be defined as &name.type
run {
  &myfunc
}
===== [2:3] address of function must be defined as &name.type
run {
  int a = &10
}
===== [2:12] unexpected token, expecting the name of the identifier
run {
  int i
  struct my1
}
===== [3:3] unexpected token, expecting value, identifier or calling func
run {
  int a = &
===== [2:12] unexpected end of the source
run {
  fn my1
}
===== [2:3] unexpected token, expecting value, identifier or calling func
fn my1 qwer
===== [1:8] unexpected token, expecting type
fn my1
fn my1
===== [2:4] my1 type has already been defined
struct my {
  int a
}
fn my
run {
}
===== [4:4] my type has already been defined
fn mytype {
===== [1:11] unexpected token, expecting a new line
fn {
===== [1:4] unexpected token, expecting the name of the identifier
run str {
  str s &= "abc"
  return s
}
===== [2:9] function AssignBitAnd(str, str) has not been found
run {
  int a = 10
  a %= 2 - 2
}
===== [3:5] divided by zero
run {
  int a = 10
  a <<= -3
}
===== [3:5] right operand of shift cannot be less than zero
run {
  int a = 10
  a >>= -7
}
===== [3:5] right operand of shift cannot be less than zero
run {
  int a = 10 % 0
}
===== [2:14] divided by zero
const { 12 = 20 }
===== [1:9] unexpected token, expecting the name of the identifier
const { 1_2 = 20 }
===== [1:10] wrong sequence of characters
const { _12 = 20 }
===== [1:9] unknown character
include { `ab/%{MYPATH}/filename` }
===== [1:16] string cannot contain an expression
run ok {}
run {}
===== [2:1] run function has already been defined
run {
  int i
  if true {
    if false {
      for k in 1..100 {
          int i
      }
    }
  }
}
===== [6:15] "i" has already been used as the name of the function, type or variable
func my() {
}
===== there is not run function
include { "../filename" 
===== [1:11] can't read include file: ../filename
include { "" }
===== [1:11] can't read include file:
include { 
===== [1:10] unexpected end of the source
include { 
   `${VAL} abc`}
===== [2:10] string cannot contain an expression
include { abc}
===== [1:11] unexpected token, expecting a string
run {
  switch 1 
  default {}
}
===== [3:3] unexpected token, expecting 'case'
run {
  switch 1 
  case 2 {}
  default {}
  case 3 {}
}
===== [5:3] unexpected token, expecting value, identifier or calling func
run {
  switch 3.14
  case 0.1, 0.2 + 0.3, `4.5` + `23` {
  }
}
===== [3:30] wrong type, expecting float type
run {
  switch 'a'
  case 10 {
    false 
  }
}
===== [3:8] wrong type, expecting char type
run {
  switch true 
  case {
    false 
  }
}
===== [3:8] unexpected token, expecting expression or statement
run {
  arr myarr
  switch myarr  
  case myarr {}
}
===== [3:10] wrong type arr.str for switch, expecting int, float, bool, char or str
run {
  switch true 
  case false 
}
===== [4:1] unexpected token, expecting {
run {
  switch true {}
}
===== [2:15] unexpected token, expecting 'case'
run {
  switch {}
}
===== [2:10] unexpected token, expecting expression or statement
run str {
  str 10
}
===== [2:7] unexpected token, expecting the name of the identifier
func vary(arr pars...) int : return 1
run {
  arr pars = {`1`, `2`}
  arr.int pars2 = {1, 2}
  vary(pars, pars2)
}
===== [5:3] function vary(arr.str, arr.int) has not been found
func vary(int pars...) int : return 1
run {
  arr pars = {`1`, `2`}
  vary(2, pars, 3)
}
===== [4:3] function vary(int, arr.str, int) has not been found
func vary(int pars...) int {
  return 1
}
run {
  vary(2, 1.2, 3)
}
===== [5:3] function vary(int, float, int) has not been found
func vary {}
func vary(int i, int pars...) int {
  return 1
}
===== [2:6] function vary() has already been defined
func vari(float i, float pars...) :
func vari(int i, int pars...) int :
===== [2:6] function vari(int, ...) has already been defined
func var(int i, int pars...) int {
  return 1
}
func var(int i) int {
  return 2
}
===== [4:6] function var(int, ...) has already been defined
run int {
  return
}
===== [2:9] function must return a value
func my(int a, int ... ) {
}
===== [1:20] unexpected token, expecting the name of the identifier
func my(int a, int b..., ) {
}
===== [1:24] unexpected token, expecting ')'
run {
  int myname
  myname. = 10
}
===== [3:11] unexpected token, expecting value, identifier or calling func
run {
  for i in 1..5 :
  if false : continue
}
===== [3:14] continue can only be inside while or for
run {
  if true {
    break
  }
}
===== [3:5] break can only be inside while or for
run buf {
  int i = 1001
  buf a = {0, 255, i}
  return a
}
===== [3:20] byte value is out of range
run {
  buf a = {10, `100`, 'd', 1.2}
}
===== [2:28] wrong type, expecting int, buf, char, str type
run {
  buf a
  a += 200
  a[0] += 100
}
===== [4:8] byte value is out of range
run {
  buf a
  a += -1
}
===== [3:5] byte value is out of range
run {
  buf a
  a += 100
  a[0] = 256
}
===== [4:8] byte value is out of range
run {
  buf a
  a += 1000
}
===== [3:5] byte value is out of range
run float {
  float one = 5.6E
}
===== [2:15] the number 5.6E is out of range
run float {
  float f
  return f /= float("0.0")
}
===== [3:12] divided by zero
run float {
  return float("3.145")/0
}
===== [2:24] divided by zero
run float {
  return float("3.14.5")
}
===== [2:10] converting string to float is invalid
run arr.int {
  arr.int myarr = {1, 

  ,}
  return myarr
}
===== [4:3] unexpected token, expecting value, identifier or calling func
struct forInit : str name;int ID
run test {
  forInit fi={ID:10
       name: 20}
}
===== [4:14] wrong type, expecting str type
struct forInit : str name;int ID
run test {
  forInit fi={ID:10; name:"val", 20}
}
===== [3:34] unexpected token, expecting the name of the field
run test {
  arr.int ai={10, 20, "str"}
}
===== [2:23] wrong type, expecting int type
struct forInit : str name;int ID
run test {
  forInit fi={"I\{"D"}":10}
}
===== [3:22] unexpected token, expecting the name of the field
struct forInit : str name;int ID
run test {
  forInit fi={"ID":10, "str": "string"}
}
===== [3:24] there is not str field in forInit struct
struct forInit : str name;int ID
run test {
  str val
  forInit fi={val + "str": "string"}
}
===== [4:19] unexpected token, expecting the name of the field
struct forInit : str name;int ID
run test {
  forInit fi={"val" + name: "string"}
}
===== [3:23] unknown identifier name
struct forInit : str name;int ID
run test {
  forInit fi={test: "string"}
}
===== [3:15] there is not test field in forInit struct
struct itself : int id;itself next
run test int {
  itself a 
  int ret = a.next.id + 1
  return ret
}
===== [4:13] undefined value
struct itself : int id;itself next
run test itself {
  itself a 
  return a.next
}
===== [4:10] undefined value
struct rec : int a; rec owner
run rec {
  rec r1
  r1.a = 1
  r1.owner &= r1
  return r1
}
===== [5:12] there is a recursive or self assignment
run {
  arr.arr.int r1= {{11}}
  r1[0] = r1[0]
}
===== [3:9] there is a recursive or self assignment
run arr.int {
  arr.int r1= {10}
  return r1 = r1
}
===== [3:13] there is a recursive or self assignment
struct my1 : int a
struct my2 : int a
run {
  my1 m1
  my2 m2 = m1
}
===== [5:10] can't assign my1 to my2
struct my {
  int a
}
run str {
  my mys
  return mys.b
}
===== [6:10] my type doesn't have b field
run str {
  map m
  return m.field
}
===== [3:10] map.str type is not struct type
const : CAPITAL.NAME = 10
===== [1:9] The name of constant must consist of only capital letters
struct CAPI_TAL : int my
===== [1:8] The name of variable, type or function can't consists of only capital letters
func myFunc() str {
  str s.test 
  return s.test
}
===== [2:7] the name of the identifier can't contain a dot
func my.Func() str : return "test"
===== [1:8] unexpected token, expecting {
struct myType : int my.value
===== [1:21] the name of the identifier can't contain a dot
struct typ.45 : int my 
===== [1:8] the name of the identifier can't contain a dot
struct val 
{ 
  int first
  int second
===== [4:13] unexpected end of the source
struct type_3 : int my q
===== [1:24] unexpected token, expecting a new line or }
struct type1 : int arr 
===== [1:20] unexpected token, expecting the name of the identifier
struct type_same { int same; str same }
===== [1:34] same field has already been defined
struct type1 { int a }
struct type1 { int b }
===== [2:8] type1 type has already been defined
struct int { name
===== [1:8] int type has already been defined
struct errTest { int 
     str a }
===== [2:12] unexpected token, expecting the name of the identifier
struct errTest { int }
===== [1:22] unexpected token, expecting the name of the identifier
struct qqq { name
===== [1:14] unexpected token, expecting type
struct qqq name 
===== [1:12] unexpected token, expecting {
struct {} 
===== [1:8] unexpected token, expecting the name of the identifier
run map.str {
  map myr = {"1":1, "2":true}
  return myr
}
===== [2:18] wrong type, expecting str type
run map.str {
  map myr = {"test", `asdf`}
}
===== [2:22] unexpected type, expecting a pair of key and value
run map.str {
  map myr = {1:"test", 2:`asdf`}
}
===== [2:14] wrong type, expecting str type
run map.str {
  map myr = {"long key value": }
}
===== [2:32] unexpected token, expecting value, identifier or calling func
run map.str {
  map myr = {"str": , "key":"test"}
}
===== [2:21] unexpected token, expecting value, identifier or calling func
run arr.str {
  arr myr = {"str", "key":"test"}
}
===== [2:26] unexpected a pair of key and value, expecting str type
run arr.arr.int {
  arr.arr.int myarr = {,{1,2,3,4,5}}
}
===== [2:24] unexpected token, expecting value, identifier or calling func
run arr.arr.int {
  arr.arr.int myarr = {{1,2,3,4,5}, 
      ,{3,4}}
}
===== [3:7] unexpected token, expecting value, identifier or calling func
run arr.int {
  arr.int myarr = {, 5}
}
===== [2:20] unexpected token, expecting value, identifier or calling func
run arr.str {
  arr myr = {"test", ,`asdf`}
  return myr
}
===== [2:22] unexpected token, expecting value, identifier or calling func
run arr.int {
  arr.int myarr = {1, "qwerty"}
}
===== [2:23] wrong type, expecting int type
run arr.int {
  arr.int myarr = {1,{10}}
}
===== [2:22] wrong type, expecting int type
run arr.int {
  arr.int myarr = {1, 
  ,}
  return myarr
}
===== [3:3] unexpected token, expecting value, identifier or calling func
run arr.int {
  arr.int myarr = 
===== [2:18] unexpected end of the source
run {
  map myarr
===== [2:12] unexpected end of the source
run { arr.int my
  arr mys
  my = mys
}
===== [3:6] function Assign(arr.int, arr.str) has not been found
run { map.int my
  map mys
  my = mys
}
===== [3:6] function Assign(map.int, map.str) has not been found
run str { map.str my
  return my[`123`]
}
===== [2:13] there is not key in the map [123]
run str { map my
  return my[1]
}
===== [2:14] wrong type of index, expecting str type
run str { arr my
  return my[`1`]
}
===== [2:16] wrong type of index, expecting int type
run {
  arr.arr.str ina
  ina += `string`
}
===== [3:7] function AssignAdd(arr.arr.str, str) has not been found
run {
  arr.arr.str ina
  arr.int item
  ina += item
}
===== [4:7] function AssignAdd(arr.arr.str, arr.int) has not been found 
func myfunc(str the my.par) {}
===== [1:21] the name of the identifier can't contain a dot
func myfunc { dot.dot  }
===== [1:15] unknown identifier dot
func myfunc { arr.str my.v}
===== [1:23] the name of the identifier can't contain a dot
func my.func {}
===== [1:6] the name of the identifier can't contain a dot
run my.run {}
===== [1:5] the name of the identifier can't contain a dot
const : MY.MY = 1 
run {}
===== [1:9] The name of constant must consist of only capital letters
run str {
  arr array
  array += 1
  return array[0]
}
===== [3:9] function AssignAdd(arr.str, int) has not been found
run str {
  arr array
  return array[]
}
===== [3:16] there is not index value
run str {
  arr array
  return array[0][0][0]
}
===== [3:20] char type does not support indexing
run str {
  arr array
  array["OK"] = `qq`
  return array[0]
}
===== [3:13] wrong type of index, expecting int type
run str {
  arr array
  array += `qq`
  return array[1]
}
===== [4:16] index out of range
run {
  for ch in 0..16100000 {}
}
===== [2:3] maximum cycle count has been reached
run { 1..`true`}
===== [1:8] function NewRange(int, str) has not been found
run { for ch in 10..2 {
  for ch in 1..5 :
}}
===== [2:7] "ch" has already been used as the name of the function, type or variable
run { for ch, ind in 10 {}}
===== [1:22] int type does not support indexing
run { for ch, ind `qqqq` {}}
===== [1:19] unexpected token, expecting 'in'
run { for 10 in `qqqq` {}}
===== [1:11] unexpected token, expecting the name of the identifier
run { char ch 
   for ch in `qqqq` {}
}
===== [2:8] "ch" has already been used as the name of the function, type or variable
run { for ch in `qqqq`
===== [1:22] unexpected end of the source
run { `my string`[1] }
===== [1:7] unexpected token, expecting a variable for indexing
run { str s; s[ 50 + 50 ] = 'A' }
===== [1:20] index out of range
run char { str s = `ok`; return s[-1] }
===== [1:35] index out of range
run { str s; s[ true || false ] }
===== [1:31] wrong type of index, expecting int type
run { int a ; a[ 2*3 ] }
===== [1:15] int type does not support indexing
run { VERSION[0 + 2 + 3] }
===== [1:7] unexpected token, expecting a variable for indexing
run { str a; a[ 1, 2 ] }
===== [1:18] there is an unclosed left square bracket
run { str a; a[] }
===== [1:16] there is not index value
run { int a = 10 + [] }
===== [1:20] unexpected token, expecting a variable for indexing
run { 10+2, 34 }
===== [1:11] unexpected token, expecting operator
run { '\a' + '\d' }
===== [1:14] char literal has wrong format
run { '\X22' }
===== [1:7] char literal has wrong format
run { char ch; ch = 'asd' }
===== [1:21] char literal has wrong format
run { char ch = '' }
===== [1:17] char literal has wrong format
run int { return 0x
===== [1:18] the number 0x is out of range
run str { return '\
===== [1:17] unexpected end of the source
const IOTA {
  MY DEPTH
}
run {} 
===== [2:6] constant DEPTH has already been defined!
const {
  VERSION = `1.0.1`
}
run str { return VERSION} 
===== [2:13] constant VERSION has already been defined!
run str {
  $ go build my.go
  return $ echo skip
} 
===== [2:3] exit status 1
run int : if true: return 20; return 30
===== [1:18] colon has already been specified in this line
run int { 
  return 10 + 20 :
}
===== [2:18] unexpected token, expecting expression or statement
run str { 
  return `text` + : `right` 
}
===== [2:19] unexpected token, expecting value, identifier or calling func
run str { 
  return `text%{ : }` 
}
===== [2:18] there is an unclosed left parenthesis
run str { return "\{ if true : "test" } text" }
===== [1:22] unexpected token, expecting value, identifier or calling func
run str { return `a${ $$ }c` }
===== [1:22] wrong environment name, expecting ${NAME}
run str { return $ a${}c }
===== [1:23] wrong environment name, expecting ${NAME}
run str { return `${test }c` }
===== [1:25] wrong environment name, expecting ${NAME}
run str { return `a${ test}` }
===== [1:22] wrong environment name, expecting ${NAME}
run { int i = 20
   i /= 0
}
===== [2:6] divided by zero
run { 
  $=
}
===== [2:4] wrong sequence of characters
run { 
  str a = $ ""
}
===== [2:11] empty $ command
run { 
  $ 
}
===== [2:3] empty $ command
run str { 
  return $ echo "my test
}
===== [2:10] unclosed quotation mark in $ command
###
# test
run int { 
  return 2
}
===== [0:0] source code is empty
#!gentee
#
run int { 
  return "2+3"
}
===== [4:15] function returns wrong type
run int { 
  return *20
}
===== [2:10] function Len(int) has not been found
run str { 
  return "\{ if true {}}`
}
===== [2:14] unexpected token, expecting value, identifier or calling func
run str { 
  return `%{10
  20}`
}
===== [3:3] unexpected token, expecting operator
run str { 
  return `end%{}`
}
===== [2:16] unexpected token, expecting value, identifier or calling func
run str {
  return "left \z"
} 
===== [2:10] invalid syntax of double quotes string
run str {
  str(10) += `abc`
}
===== [2:11] expecting l-value in the left operand of assign operator
run int {return int(`text`)}
===== [1:17] converting string to integer is invalid
const {EMPTY}
===== [1:13] unexpected token, expecting =
const {int OOOPS = 1}
===== [1:8] The name of constant must consist of only capital letters
run int { 
  int a b=2 c
  return a + b+c
}
===== [2:10] unexpected token, expecting the name of the identifier
run str { 
  str s = `0Ê123`
  ++s[0]
  return s
}
===== [3:3] wrong type of operands, expecting int type
run str { 
  char a
  a++
}
===== [3:4] wrong type of operands, expecting int type
run bool { bool a; return ++a}
===== [1:27] wrong type of operands, expecting int type
run int { int a; return --a++}
===== [1:28] expecting l-value in the left operand of assign operator
run int { int a= 10; return a+=10+a*=3}
===== [1:36] expecting l-value in the left operand of assign operator
run int { return 5<<-1}
===== [1:19] right operand of shift cannot be less than zero
run { DEPTH = 1}
===== [1:13] expecting l-value in the left operand of assign operator
const 1/IOTA {A B}
run int {
  return A + B
}
===== [1:8] divided by zero
run { int a = IOTA}
===== [1:15] IOTA can be only used in const expression
const {OOOPS = IOTA}
run {}
===== [1:16] IOTA can be only used in const expression
const true { OOOPS = QQQ+1}
run {}
===== [1:20] unexpected token, expecting the name of the identifier
func myFunc() {
  myFunc()
}
run { myFunc()}
===== [2:3] maximum depth of recursion has been reached
run { while true{}}
===== [1:7] maximum cycle count has been reached
func myConst(int par) int : return 2/par
const { MYVAL = myConst(0)*2}
run int { 
  return MYVAL
}
===== [1:37] divided by zero
const { CONST = CONST+1}
run {}
===== [1:17] unknown identifier CONST
const { CONST }
run {}
===== [1:15] unexpected token, expecting =
const { MyCONST }
run {}
===== [1:9] The name of constant must consist of only capital letters
func MYFUNc(int iPARAM1 PaRAM2 UNI_ПАР3) { return}
run { MYFUNc(10, 20, 30)}
===== [1:32] The name of variable, type or function can't consists of only capital letters
func MYFUNC() { return}
run { MYFUNC(10)}
===== [1:6] The name of variable, type or function can't consists of only capital letters
run { int A = 1}
===== [1:11] The name of variable, type or function can't consists of only capital letters
run { 3-?(1 > 0,30,false)}
===== [1:9] different types of exp1 and exp2 in ?(cond, exp1, exp2)
run { ?(20,30,40)}
===== [1:7] operator ? must be called as ?(boolean condition, exp1, exp2)
run { int a = 1+?(true,20)}
===== [1:17] operator ? must be called as ?(boolean condition, exp1, exp2)
run { bool a = true || 2 }
===== [1:21] wrong type of operands, expecting boolean type
run { a = 10 $ 2 }
===== [1:7] unknown identifier a
run { 
  true 10
}
===== [2:8] unexpected token, expecting operator
run { 
  while true if 
}
===== [2:14] unexpected token, expecting operator
run { 
  while {10}
}
===== [2:9] unexpected token, expecting expression or statement
func myDiv(int a b) int {
  return a/b
} 
run { myDiv(3, 0) }
===== [2:11] divided by zero
run { 
  int int
}
===== [2:7] "int" has already been used as the name of the function, type or variable
run int { 
  bool b
  if true {int i j=7}
}
===== [3:19] unexpected token, expecting the name of the identifier
run { 
  int my 
  if true { int q my }
}
===== [3:19] "my" has already been used as the name of the function, type or variable
run int { 
  8+4 = 32
}
===== [2:7] expecting l-value in the left operand of assign operator
func param(int par) int {par=true}
run int { 
  return param(8)
}
===== [1:29] function Assign(int, bool) has not been found
run int {
    return 46 + test * 45
}
===== [2:17] unknown identifier test
func name(int par) int {return par} 
run int {
    return name(20, 30)
}
===== [3:12] function name(int, int) has not been found
func name(int int) {} 
===== [1:15] "int" has already been used as the name of the function, type or variable
func name(int double double) {} 
===== [1:22] "double" has already been used as the name of the function, type or variable
func name(int par) {} 
func name(int par2) {} 
===== [2:6] function name(int) has already been defined
func int(int q,) {} 
===== [1:16] unexpected token, expecting type
func int(int q z, qwer) {} 
===== [1:19] unexpected token, expecting type
func int(int q, int) {} 
===== [1:20] unexpected token, expecting the name of the identifier
func name 
===== [1:10] unexpected end of the source
func {}
===== [1:6] unexpected token, expecting the name of the identifier
run { if 45+67 {}}
===== [1:12] wrong type of expression, expecting boolean type
run { 45 { 57}}
===== [1:10] unexpected token, expecting expression or statement
run { false + 0x7}
===== [1:13] function Add(bool, int) has not been found
run int { return false}
===== [1:23] function returns wrong type
run { /* comment
line*/
10 /* comment
line
*/
===== [3:3] unexpected end of the source
// run { 10 // 20 }
===== [0:0] source code is empty
run { 10 // comment }
===== [1:9] unexpected end of the source
run { 648438734873493434340}
===== [1:7] the number 648438734873493434340 is out of range
run { ((5-8)*6}
===== [1:15] there is an unclosed left parenthesis
run { (5-7)*2)}
===== [1:14] extra right parenthesis
run { 2 + 5 / 0 }
===== [1:13] divided by zero
run {-}
===== [1:7] unexpected token, expecting value, identifier or calling func
run int {10}
===== [1:12] function must return a value
run bool { return 22 }
===== [1:22] function returns wrong type
run {    
===== [1:6] unexpected end of the source
run }
===== [1:5] unexpected token, expecting {
run {return 10}
===== [1:15] function cannot return any value
run wrong test {}
===== [1:11] unexpected token, expecting type
run int {0x999}
===== [1:15] function must return a value
run { 0779 }
===== [1:10] wrong sequence of characters
run { b® }
===== [1:8] unknown character
