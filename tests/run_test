run handle {
  handle h1
  handle h2 = h1
  return h2
}
===== <nil>
func myfunc(str filename, str varname) {
  bool exist
  if !exist : return
}
run str {
  myfunc("test", "fi")
  return "OK"
}
===== OK
run myscript str {
  return SCRIPT + `OK`
}
===== myscriptOK
run str {
  int a
  str p
  str s = "ok"
  if s? : s += "="
  return s+`%{"0"?}%{10?}%{!""?}%{"s"?}%{a?}=%{(10+a)?}=%{*s?}%{*p?}`
}
===== ok=falsetruetruetruefalse=true=truefalse
run int {
  int a b
  local mul(int i) int {
    return (i+1)*++b + 1
  }
  return a.mul().mul().mul()
}
===== 25
func mul(int i) int {
  int ? a = 2
  return i*a+1
}

run int {
  return (3).mul().mul(a: 3).mul()
}
===== 45
run str {
  str s = "StriNg"
  return (s.Lower() + "ooops".Upper()).Trim(`sS`)
}
===== tringOOOP
fn myi(int) int
struct myd {
   myi f
   int v
}
func fi(int i) int : return 2*i + 3

run int {
  myd a = {f: &fi.myi, v: 10}
  myi mf = a.f
  return a.v + mf(7)
}
=====  27
include {
  "tests/scripts/f.g"
  "tests/scripts/g.g"
  "tests/scripts/f.g"
} 

run include_test int {
  return c_func(e_func(33,11))+ cpub_func(7)
}
===== 29
run str {
  str s
  for i in 1..3 {
    str p 
    local forloc(int j) {
      p = str(i)
      s = s + str(j+i) + p
    }
    forloc(i)
  }
  return s
} 
===== 214263
run str {
  str ret
  local loc(int p, int par) {
    str pref = str(p)
    ret = ret + pref + str(par)
  }
  for i in 1..3 {
    int k = 0
    while k < i {
      loc(i,k)
      k++
    }
  }
  return ret
}
===== 102021303132
run str {
    str ret = `START`

    local outitem(int par )  {
      if true {
        ret += str(par)
      }
    }
    local subitem(int par )  {
        outitem(par)
    }
    outitem(0)
    if true {
      outitem(1)
    }
    switch ret 
     case `1` : outitem(0)
     default: outitem(2)
    for i in 3..4 : outitem(i)
    while true {
      outitem(5)
      break
    }
    subitem(6)
    return ret + `END`
}
===== START0123456END
func optparam(str s, int iargs...) str {
  int ?mul = 1
  int sum = 1
  for i in iargs {
      sum += i
  }
  return s + str(sum*mul)
}
run str {
  return optparam(`&`, 1,2,3,4) + optparam(`+`, mul: 3) +  optparam(`*`, 10,mul: 2)
} 
===== &11+3*22
run str {
  str ret 
  try {
    error(101, `oooops`)
  }
  catch err {
    for i in 1..100 {
       for j in i..(i+50) {
          if i + j == ErrID(err) {
              ret = `%{i} + %{j}`
              recover
              ret += `x`
          }
          ret += `y`
       }
      ret += `z`
    }
    ret += `a`
  }
  return ret
} 
===== 26 + 75
run int {
  int i
  try {
    i = 10/i + 7
  }
  catch err {
    i = 5
    retry
    i += 10
  }
  return i
} 
===== 9
run int {
  int i
  while i < 3 {
    try {
      i = 10/i
    }
    catch err {
      i = 2
      recover
      i *= 3
    }
  }
  return i
} 
===== 5
run int {
  int i
  try {} catch err {}
  try {
    i += 100
  }
  catch err {
    i -= 7
  }
  return i
} 
===== 100
run int { 
  thread th0 = go { int j = 1 }
  go { int j = 1 }
  thread th1
  th1 = go ( a: 10) { th1 #= a }
  go () {int k = 0} 
  thread th2 = go ( a: Max(1,23), 
       b: Min(100,87)) {int k = a+b; th2 #= k} 
  wait(th2)
  wait(th1)
  return int(#th2) + int(#th1)
}
===== 120
run int {
  local loc(int i) int {
      local loc2 int : return 2 + i
      return i * loc2()
  }
  return loc(3)+loc(4)
} 
===== 39
run int {
  local iloc(int j) int {
    if j > 10 {
       return 77+j
    } 
    return j
  }
  return iloc(11) + iloc(5)
} 
===== 93
run str {
  str s
  for i in 1..3 {
    local forloc(int j) {
      s += str(i + j)
    }
    forloc(i+1)
    forloc(i+2)
  }
  return s
} 
===== 345678
run str {
  int i 
  local loc_Name(str s) str {
    int k = ++i + 1
    return s + `=` + str(k)
  }
  return loc_Name(`1`) + ` ` + loc_Name(`2`)
} 
===== 1=2 2=3
run int {
  int i
  local loc(int step) int {
    return (i += 2)+step
  }
  return loc(1) + loc(2)*loc(3)
} 
===== 57
run int {
  int i
  local loc int : return (i += 2)+1
  return loc() + loc()*loc()
} 
===== 38
run int {
  local loc int : return 10
  return loc() + 20
} 
===== 30
func mylocal(str a) str {
  str out
  local loc1 {
     out += a + `01`
  }
  loc1()
  loc1()
  return out
}
run str {
  return mylocal(`start`)
} 
===== start01start01
run int {
  int i = 2
  if true {
      i++
      if true {
         i++
         return i + 1
         1/0 
      }
      1/0
  }
  1/0
  return i
} 
===== 5
func vars(str a) str {
  str ? a1 a2 a3
  return a + a1  + a2 + a3
}
run str {
  return vars(`A`) + vars(`B`, a1: `C`) + vars(`D`, a3: `F`, a2: `E`)
} 
===== ABCDEF
func vara(int q...) int {
  arr.int ? ai &= {1,2,3}
  bool ?b
  int sum
  for i in q : sum += i
  for i in ai : sum += i
  ai[0] = 0
  if b : ai[1] = 1
  return sum
}
run int {
  arr.int mya = {7,3,1}
  int ret = vara(4, 5, 6) + vara() + vara(2,8, b: true, ai: mya)
  for i in mya : ret += i
  return ret
} 
===== 50
func vari(str a, str q...) str {
  str a1 = `w`
  str ? a2 
  str ? a3 = `z`
  for s in q : a1 += s
  return a1 + a + a2 + a3
}
run str {
  return vari(`0`) + vari(`1`, `2`, `3`) + vari(`4`, `5`, a2: `7`) + vari(`8`, a3: `9`) 
} 
===== w0zw231zw547zw89
func my(str s) str {
  str s1 = `a`
  str ? s3 = `b`
  return s3 + s1 + s
}
run str {
  return my(`0`) + my(`1`, s3: `9`) +my(`2`, s3: `8`)
} 
===== ba09a18a2
func my str {
  str ? s1 = `a`
  str ? s2 = `b`
  return s1 + s2
}
run str {
  str tmp = my( s2: my( s1: `ok`))
  return my() + my(s2: `c`) + my(s2: `e`, s1 :`d`) + tmp
} 
===== abacdeaokb
func my int {
  int k = 200
  k += 232332
  int ? s
  int ?i = 10
  int j = 20
  arr.int ? ai = {10, 20, 30}
  s += 8
  return k + i + j + s + ai[2]
}
run int : return my()
===== 232600
run arr.thread {
  arr.thread ath 
  ath += go {int k = 0} 
  thread th = 
  go { int i = 1 
  }
  ath += th
  return ath
}
===== [1 2]
run str {
  if true {
  go { int i = 1 
}}
  return `go`
}
===== go
func ooops() {
    AB #= `oops`
}
run str {
     AB #= `test`
     CD #= `#AB# - `
     E #= #AB
     ooops()
     val #= 10
     return # CD + # E + ## ` #val# == 10`
}
===== oops - test 10 == 10
run str {
  AºB #= `ººº`
  CD #= #AºB + `=`
  тест #= 10
  b#= (10==10)
  return #CD + #AºB + #тест + (f #= 4.56) + #f + #b
}
===== ººº=ººº104.564.56true
run str {
  CtxSet(`AB`, `Result тест`)
  CtxSet(`AºB`, `ººº`)
  CtxSet(`LºM`, `#AB#=#AºB#`)
  return #LºM
}
===== Result тест=ººº
run str {
  CtxSet(`abc`, `ABC`)
  CtxSet(`float`, `#abc# #abc#`)
  return #float
}
===== ABC ABC
run str {
  CtxSet(`a`, `ABC`)
  CtxSet(`0`, `123`)
  str b = ` = #a#`
  return ##`#a# -> #0#` + ##b
}
===== ABC -> 123 = ABC
fn myInt() int
fn myStr(str) int

func a1 int : return 101
func a2( str s ) int : return int(s) + 3

run int {
  myInt i1 = &a1.myInt
  myInt i2 = i1
  myStr s1 = &a2.myStr
  myStr s2 = s1
  return i1() + i2() + s1(`23`) + s2(`7`)
}
===== 238
fn myz() 
fn myType
fn myInt() int
fn myStr str

fn my( int int ) int
func add( int i, int j ) int : return i + j
func sub( int i, int j ) int : return i - j
func my2(int i j, my f ) int : return j + f(i, j)

run int {
  my isub = &sub.my
  return my2(1, 2, &add.my) + my2(3, 7, isub)
}
===== 8
run arr.arr {
  arr.arr a
  arr.arr.str c
  arr.arr.str b = {{`1`, `2`},{`3`, `4`}}
  c = a
  a = c
  return a &= b
}
===== [[1 2] [3 4]]
run int {
  int i &= 0xffff
  return i
}
===== 0
run arr {
  arr at &= {`A`, `B`, `C`}
  arr ab &= at
  ab += `D`
  return at
}
===== [A B C D]
run map.str {
  map ma = {`1`:`A`, `2`:`B`, `3`:`C`}
  map.str mc
  mc &= ma
  mc[`4`]= `D`
  ma[`0`] = `Z`
  return mc
}
===== map[1:A 2:B 3:C 4:D 0:Z]
run arr.str {
  arr ab = {`1`, `2`, `3`, `4`}
  arr.str ac
  ac &= ab
  ac += `5`
  ab[0] = `0`
  return ac
}
===== [0 2 3 4 5]
struct mystr {
   int a
   str b
}
run mystr {
  mystr a = {a: 10, b: "string"}
  mystr b
  b &= a
  a.b += "ok"
  b.a *= 2
  a.a += 3
  return b
}
=====  mystr[a:23 b:stringok]
run str {
  map.str mb = {`First`: `Begin`, `Last`: `End`}
  arr.str b = {`Start`, `Finish`}
  arr a = b
  map ma = mb
  return a[0] + ma[`Last`]
}
===== StartEnd
func var(int i) int { return i*2 }
func var(int i, int pars...) int {
  int ret
  for k in pars : ret += k
  return ret * i
}
run int {
  return var(5) + var(3,1,2,3)
}
===== 28
func var(int i j) int { return i * j}

func var(int pars...) int {
  int ret
  for i in pars : ret += i
  return ret
}
run int {
  return var(3,5) + var(1,2,3)
}
===== 21
run float {
  float ret
  switch ret + 1.1 
  case 2.1, 3.5 { ret += 5.7 }
  case 0.014 { ret += 2.3
  }
  case 67.9, 123.67 {}
  default {
    switch ret 
    case 3.4, 5.6, 0.0: ret += 4.5
    if ret < 5 {
      break
    }
    ret += 6.7
  }
  ret *= 2.0
  return ret
}
===== 9
run str {
  str out = `*`
  switch out 
  case `1`, `2` { out += `-` }
  case `*` {out += `@`
    if true : break
    out += `=`
  }
  case `*`, `*@` {out += `-`}
  default {}
  switch out 
  case `*@` {}
  return out
}
===== *@
run int {
  int i = 22
  switch i 
  case 21, 23, 0 { i*=100 }
  default { 
    while i < 50 {
      i++
      if i == 29 : break
    } 
    i += 1
  }
  return i
}
===== 30
run int {
  int i = 2
  switch i*i 
  case 20 { i /=2 } case 4 {i *=i }
  return i
}
===== 4
run int {
  int i = 67
  int j
  switch i+3 
  case 20,10,5 {
    i +=10
  } case j,20+ 50,80 {
    i -=10
  }
  switch 'a' 
  case 'c', 'b', 'a' : i += 100
  return i
}
===== 157
run int {
  int i
  while i < 5 {
    i++
    return 100
  }
  return i
}
===== 100
run str {
  switch true 
  case true {
    return `OK`
  }
  return `OOOPS`
}
===== OK
run {
  int t = 10
  int(`10`)
}
===== <nil>
struct tmp : int a
func getTmp(int i) tmp {
  tmp ret = {a: i*2 + 1}
  return ret
}
run int {
  tmp t = getTmp(-2)
  return t.a //+ getTmp(1).a + getTmp(2).a
}
===== -3
func length(arr pars...) int {
  int sum
  for v in pars : sum += *v
  return sum
} 
run int {
  arr pars = {`1`, `2`}
  arr pars2 = {`1`, `2`, `3`}
  return length(pars, pars2)
}
===== 5
func sum(int pars...) int {
  int i = 1
  for v in pars : i += v
  return i  
}
func var(int i, int pars ...) int {
  return sum(i, pars, i)
}
run int {
  int ret = 1 + sum() + sum(1) + sum(2,3) - sum(0, 1, 2) // == 6
  return ret + var(1, 2, 3, 4)
}
===== 18
func none int {
  return 100
}
run int {
  int r = none() + 10
  return r + none() * 2 
}
===== 310
run str {
  arr.arr ina = {{},{},{}}
  str out = $ echo %{*ina} %{*ina[2]}
  return out
}
===== 3 0\n
run int {
   int k ret
   for i in -3..3 {
      int j = 6
      while j > i {
        j--
        if j > 0 : continue; ret += 100
        ret ++
      }
      if ret > 10 : ret++; continue; ret += 2
      ret += 3
   }
   return ret
}
===== 21
run int {
   int k ret
   while k < 10 {
    for i in 1..100 {
      ret += i
      if i > 3 : break; ret += 7
    }
      if ret > 20 : break; ret += 11
      k++
   }
   return ret
}
===== 30
run str {
   for i in 1..100 {
     str pref = `end`
     str s = str(i + 1)
     if i==7 : return pref + s
     s = pref
   }
   return `ok`
}
===== end8
run int {
   int i
   while i < 10 {
     if i==5 {
       return i
     }
     i++
   }
   return i
}
===== 5
run int {
   int i
   if false {
     return 7
   } elif i == 0 {
        return 11
    }
   return 17
}
===== 11
const {
    SRC = "/home/test/"
    IN = "one
two
three"
}
run str {
    str out = $ echo -av --exclude=".git" %{SRC} "test"
    out = TrimSpace(out)
    for s in Lines(IN) : out += s
    return out
}
===== -av --exclude=".git" /home/test/ testonetwothree
run buf {
  buf b = {3, 2, 1}
  buf a = {250+5, '0', 'º', `1+2ºt`, b, 0}
  return a
}
===== [255 48 194 186 49 43 50 194 186 116 3 2 1 0]
run buf {
  buf a b
  for i in 0..3 {
    b += i
  }
  str v = `test тес`
  a += v += 'т'
  a += '1'
  a += b
  return a += 'º'
}
===== [116 101 115 116 32 209 130 208 181 209 129 209 130 49 0 1 2 3 194 186]
run buf {
  buf a
  for i in 0..3 {
    a += i
  }
  a[0] = 'A'
  a[1] = '='
  return a
}
===== [65 61 2 3]
run arr.buf {
  buf a b
  for i in 0..3 {
    a += i
    b += 1+i
  }
  arr.buf ab = {a, b}
  ab[0][0] = 55
  ab[1][1] = 77
  ab[1] += 100
  return ab
}
===== [[55 1 2 3] [1 77 3 4 100]]
run buf {
  buf a b
  for i in 0..3 {
    a += 2+i
  }
  b = a
  a[0] = 34
  b[1] += 5
  return b
}
===== [2 8 4 5]
run int {
  buf a
  for i in 3..5 {
    a += 2*i
  }
  return a[0] + a[1] + a[2]
}
===== 24
run int {
  buf a
  int sum
  for i in 1..4 {
    a += i
  }
  a[2] = 7
  for i in a {
    sum += i
  }
  return sum
}
===== 14
run buf {
  buf a
  a += 0
  a += 127
  a += 200
  a += 255
  return a
}
===== [0 127 200 255]
run str {
  buf a b
  a += 10
  a += 13
  return `%{*b} %{*a}`
}
===== 0 2
const {
  MYF = 4.67
}
run float {
  return MYF + 0.33
}
===== 5
run arr.float {
  arr.float ret = {0.123e+3, 234.e-2, 9.7732E-1, 0.0177E+2,5e-2}
  return ret
}
===== [123 2.34 0.97732 1.77 0.05]
run float {
  float one = 5.623 + 2.+32.1 - 0.22 -0.
  return one + 1.E2 - 2E1 + 0.99E1
}
===== 129.403
run str {
  float zero
  float f = float("-1.3")
  str s = ?(f>0, "0", "1") + str(f<=0)
  return s + " \{f == zero} + \{f != zero}"
}
===== 1true false + true
run str {
  float f = float("23.56")
  return "out \{f + float("2.1")} " + `%{-f/2}`
}
===== out 25.66 -11.78
run float {
  float f
  f += float(2)
  f /= float(10)
  f *= float(2)
  return f -= float("5.3")
}
===== -4.8999999999999995
run float {
  float f
  f = 3 * float(2)
  return float(5)*f * 10
}
===== 300
run float {
  float f
  f = 4 / float(2)
  return float(5)/f * 3 / 2
}
===== 3.75
run float {
  return 200 - float(100) - float("3.5") - 50
}
===== 46.5
run int {
  return int(float("314.15")) + int(float(str(float("33.75")) + "33")*1000)
}
===== 34067
run float {
  return 99 + float(100) + float("3.1415926535") + 101
}
===== 303.14159265349997
struct my : int a1; str a2
run map.my {
  map.my mm={"1":{a1:0, a2:"zero"}, "2":{a1:1},
  
           "3":{a1:2, a2:"two"}}
  return mm
}
===== map[1:my[a1:0 a2:zero] 2:my[a1:1 a2:] 3:my[a1:2 a2:two]]
struct my : int a1; str a2
run arr.my {
  arr.my am={{a1:0, a2:"zero"}, {a2:"one"}
           {a1:2, a2:"two"}}
  return am
}
===== [my[a1:0 a2:zero] my[a1:0 a2:one] my[a1:2 a2:two]]
struct st_one : int ID; int Id
struct st_two : int ID; st_one one; arr st_arr; map.int st_map
run st_two {
  st_two st={ID: 11*2+(3-1)*3, one: {ID: st.ID + 3, Id : 8*11}
             st_arr:{"one", "two"}, st_map:{"zero": 0, "first": 1}}
  return st
}
===== st_two[ID:28 one:st_one[ID:3 Id:88] st_arr:[one two] st_map:map[zero:0 first:1]]
struct forInit : str name;int ID; int q
run test forInit {
  str v = "value"
  forInit fi={q: 11, name: "string " + v, "ID": 74+3}
  return fi
}
===== forInit[name:string value ID:77 q:11]
struct rec : int a; arr.rec self
run rec {
  rec r1 r2
  r1.a = 1
  arr.rec a1 = {r1}
  r1.a+=4
  r1.self = a1
  return r1
}
===== rec[a:5 self:[rec[a:1 self:[]]]]
struct test : int num; arr.int arr1; map.int map1
run int {
  test t
  t.num = 1
  t.num++
  arr.int arr1 = {99}
  t.arr1 = arr1
  t.arr1[0]--
  map.int map1
  map1["val"] = 10
  t.map1 = map1
  return 2*t.num + --t.arr1[0] + ++t.map1["val"] + 3*--map1["val"]
}
===== 139
struct eqa : int a; arr.eqa rec
run map.eqa {
  eqa eval eval2
  eval.a = 1
  arr.eqa atest = {eval}
  eval2.rec = atest
  eval2.a = 2
  map.eqa test &= {"eval": eval2}
  eval2.a = 3
  map.eqa test2 = test
  test["q"] = eval2
  eval.a = 4
  eval2.a = 5
  return test2
}
===== map[eval:eqa[a:3 rec:[eqa[a:1 rec:[]]]]]
struct eq : int a
run int {
  eq e1 
  e1.a = 99
  eq e2 = e1
  e1.a += 1
  return e1.a + e2.a
}
===== 199
struct myType1 : int a; str b
struct myType2 : int c; myType1 d

func str(myType2 mt) str : return "mt2:[\{mt.c} \{mt.d.a} \{mt.d.b}]"

run str {
  myType2 mt
  mt.c = 77
  mt.d.a = 3
  mt.d.b = `ok`
  return str(mt)
}
===== mt2:[77 3 ok]
struct myType : int a; str b

func str(myType mt) str : return "mt:[\{mt.a} \{mt.b}]"

run str {
  myType mt
  mt.a = 99
  mt.b = "тест string \{mt.a}"
  return str(mt)
}
===== mt:[99 тест string 99]
struct myType {
    int a
    str b
}
run str {
  myType mt
  return mt.b + str(mt.a + 7)
}
===== 7
run str {
  str ret
  map my = {"A": "177", `B`:`302`}
  for item, ind in my {
    ret += "\{ind}=\{item}"
  }
  return ret
}
===== 0=1771=302
run map.arr.int {
  map.arr.int ret = {"1": {3,33}
       `2`:{4,44}}
  for item in ret {
    item[*item-1] *= 10
    for v in item : v=9
  }
  return ret
}
===== map[1:[3 330] 2:[4 440]]
func val(int a b) int : return 700 + a + b
run map.map.int {
  map.map.int ret = {"test": {`zero`:0,"one":1}, `next`:{`val`:val(3,4)}}
  return ret
}
===== map[test:map[zero:0 one:1] next:map[val:707]]
run map.arr.int {
  map.arr.int ret = {"test": {0,1}
       `next`:{2,3}}
  ret[`next`][0] = 7
  return ret
}
===== map[test:[0 1] next:[7 3]]
run arr.map {
  str v = "2"
  arr.map ret = {{"test": "val"}
                 {`next`:"value " + v}}
  ret[0][`new`] = "new value " + ret[0][`test`] 
  return ret
}
===== [map[test:val new:new value val] map[next:value 2]]
run arr.arr.int {
  arr.arr.int ret = {{1, 2, 3}, {4,5,6,7}}
  ret[0][2] = 9
  return ret
}
===== [[1 2 9] [4 5 6 7]]
run map {
  map.str ret = {"test": "qqq",
       `1`:`as` + `df`
  }
  return ret
}
===== map[test:qqq 1:asdf]
run arr.str {
  arr myr = {"test",`asdf`,}
  return myr
}
===== [test asdf]
run arr.arr.int { 
  arr.arr.int a1 = {{1,2,3}, {4,5,6}}
  arr.int b1 c1
  b1 = a1[0]
  c1 = a1[0]
  for v in a1 {
    v[0] = 7
  }
  b1[2] = 33
  a1 += b1
  b1[0] = 9
  a1 += c1
  return a1
}
===== [[7 2 3] [7 5 6] [9 2 33] [1 2 3]]
run arr.int {
  arr.int myarr = {10, 
    20,3+5
    6*11,
    33}
  myarr[0] += myarr[1]
  return myarr
}
===== [30 20 8 66 33]
run map.arr.int {
  map.arr.int my
  arr.int ai
  ai += 1
  my[`q`] = ai
  ai += 2
  my[`s`] = ai
  for item in my {
    item += 3
  }
  return my
}
===== map[q:[1 3] s:[1 2 3]]
run arr.int {
  arr.int myarr 
  myarr += 7
  myarr += 5
  myarr[0] += myarr[1]
  return myarr
}
===== [12 5]
func fixMap(map.int par) {
  map.int ret
  ret[`third`] = 1
  par[`oops`] = 99
  par = ret
}
run map.int {
  map.int mymap
  mymap[`one`] = 33
  mymap[`two`] = 44
  fixMap(mymap)
  mymap[`four`] = 55
  return mymap
}
===== map[third:1 four:55]
func fixArr(arr par) {
  arr ret
  ret += `third`
  par = ret
}
run arr {
  arr myarr
  myarr += `one`
  myarr += `two`
  fixArr(myarr)
  myarr += `four`
  return myarr
}
===== [third four]
run map.arr.map.int {
  map.arr.map.int dest src
  arr.map.int asrc adest
  map.int mi m1 m2
  m1[`first`] = 1
  m1[`second`] = 2
  asrc += m1
  m2 = m1
  m2[`second`] = 3
  asrc += m2
  adest = asrc
  src[`0`] = adest
  dest = src
  mi[`last`]= 100
  src[`0`][0] = mi
  return dest
}
===== map[0:[map[first:1 second:2] map[first:1 second:3]]]
func new_map(int i) map.int {
  map.int ret
  for j in 1..2 {
    ret[str(j)]= j + i
  }
  return ret
}
run arr.map.int {
  arr.map.int myarr
  int sum

  for i in 0..1 {
    myarr += new_map(i+2)
  }
  myarr[0] = new_map(10)
  return myarr
}
===== [map[1:11 2:12] map[1:4 2:5]]
func new_arr(int i) arr.int {
  arr.int ret
  for j in 1..i {
    ret += j
  }
  return ret
}
run int {
  map.arr.int mymap
  int sum

  for i in 1..5 {
    mymap[str(i)] = new_arr(i+2)
  }
  for iarr in mymap {
    sum += *iarr
    for v in iarr {
      sum += v
    }
  }
  return sum
}
===== 105
run map {
  map mymap
  mymap["ok"] = `т123`
  mymap["new"] = mymap["ok"]
  mymap["new"][1] = mymap["ok"][0]
  return mymap
}
===== map[ok:т123 new:тт23]
run int {
  map.int mymap
  int sum
  for i in 1..5 {
    mymap[str(i)] = i  
    sum += mymap[str(i)]
  }
  return sum
}
===== 15
run map {
  map mymap
  mymap[`test`] = `true`
  mymap[``] = `false`
  mymap[`те`] = `тест`
  return mymap
}
===== map[test:true :false те:тест]
func newStr(arr.arr ina) {
    arr item
    item += str(*ina)
    ina += item
}
func newInt(arr.arr.int ina, int i) {
    arr.int item
    item += *ina + i
    ina += item
}
run str {
  arr.arr bigs
  arr.arr.int bigi
  newStr(bigs)
  newStr(bigs)
  newInt(bigi, *bigs)
  newInt(bigi, *bigi + *bigs)
  return bigs[1][0] + str(bigi[1][0]) + str(bigi[0][0])
}
===== 142
run int {
  arr.int ina 
  arr.str ins
  ina += 10
  ins += `10`
  return ina[0] + int(ins[0]) + *ina + *ins
}
===== 22
run str {
  arr ina 
  int i1 i2
  for i in 0..10000 {
    ina += str(i)
    i1 += i
  }
  for item in ina {
    i2 += int(item)
  }
  return "\{i1} == \{i2}"
}
===== 50005000 == 50005000
run arr {
  arr ina out
  ina += `one`
  ina += `two`
  for item in ina {
    out += item
    ina[1] = `ok`
  }
  return out
}
===== [one ok]
run arr {
  arr array
  array += `out`
  return array += `result`
}
===== [out result]
run str {
  arr array
  array += `1п00`
  array[0+0][3*1] = 'р'
  return array[0*21] + array[0*21][2+2-1]
}
===== 1п0рр
run str {
  arr array
  array += `1`
  array[0] = `zero`
  return array[0]
}
===== zero
run str {
  arr array
  array += `first`
  array += `second`
  return str(*array) + " \{array[0]} " + array[1]
}
===== 2 first second
run arr.int { 
  arr.int ai
  ai += 7
  ai += 0
  ai[0] += 3
  ai[1] = 7
  ai[1]++
  return ai
}
===== [10 8]
run arr.str { 
  arr a1
  str s = `0Ê1`
  s[0] = 'Ê'
  a1 += `start`
  a1 += `end`
  a1[1] += s
  a1[0][2] = '7'
  return a1
}
===== [st7rt endÊÊ1]
run int { 
  int ret
  for i, j in 3..5-7 {
    if j & 1 == 0 : ret *= i
    else : ret += i
  } 
  return ret
}
===== -4
run int { 
  int ret
  for i in 1..5 : ret += i
  return ret
}
===== 15
run str { 
  str tmp = `aΣz`
  for ch, i in tmp {
    if i < 5 : tmp += ch
  }
  return tmp
}
===== aΣzaΣz
func getStr str {
  return `t1μ=`
}
run str { 
  str dest out
  for ch, i in getStr() {
      dest += `%{ch}%{i}`
      for dch in dest : out += dch
  }
  return out
}
===== t0t011t011μ2t011μ2=3
run str { 
  str dest
  for ch, i in `strΔ` {
    dest += "\{i}\{ch}"
  }
  return dest
}
===== 0s1t2r3Δ
run str { 
  str dest
  str src = `Ω0123`
  for ch in src {
    dest += ch
  }
  return dest
}
===== Ω0123
run str { 
  str src
  int i
  while i < 10 {
    src += str(i) + `-`
    if i & 1 == 1 : i = i+1
    else : i++
  }
  return src
}
===== 0-1-2-3-4-5-6-7-8-9-
run str { 
  str s = `01 Ê123`
  s += s[2] = '\u0102'
  return s
}
===== 01ĂÊ123Ă
run str { 
  int a = 1
  char tmp = '\u0398'
  str s = `0Ê123`
  return s[2] + s[3-(2+1)] + s[2*a/2] + tmp
}
===== 10ÊΘ
const {
  CHAR = '\u0102'
  CHAR2 = 'Ê'
}
run str : return CHAR + CHAR2
===== ĂÊ
run str {
  char empty
  str out = "\{'a'} " + str('a'!='\n') + ` %{'b'}` + str(int(empty)) + str(empty)
  return out + `%{'\n'< '1'} %{'ф' >= 'Ф'} %{'a'<='A'} %{int(' ') + int('\u03B1')}`
} 
===== a true b32 true true false 977
run str {
  char my_ch = '\u03b1'
  str ch = 'a' + (' ' + '=' + '\t') + '\'' + '\"' + '\\' + '\x7A' + my_ch
  return ch += '0'
} 
===== a =	'"\zα0
run int {
  int a
  if true : a = 10; if false {a= 20} else {a+=30}
  return a
} 
===== 40
run int : return 891
===== 891
run str {
  str s 
  if *s == 0 : s = `the first line
the second line`
  return s
}
===== the first line\nthe second line
run int {
  int i 
  if i>10 : i = 10
  else : i = 6; i+=4
  return i
}
===== 10
run str {
  $BOOL = 10 == 10; str bs = 10 != 10
  $INT = 123; str is = 321
  $STR = `string`
  return $BOOL + $INT + $STR + bs + is
}
===== true123stringfalse321
run bool {
  str stemp = `My Go path: %{$GOPATH}`
  $MYVAR = stemp
  return stemp == $MYVAR
}
===== true
run hello {
  $ echo test
}
===== <nil>
run hello str {
  str name = "world"
  return $ echo Hello, %{name}!
}
===== Hello, world!\n
run str {
  return $ echo "hello"
}
===== hello\n
run myname str { 
  return `checking run myname`
}
===== checking run myname
#! gentee
###
  variable = value
###
run int { 
  str st = "four"
  return *`begin %{ `10` + "value\{20}"}`+*st
}
===== 19
run str { 
  return "\{1} \{"expression\{1-3}"}"
}
===== 1 expression-2
run str { 
  str stest = `%{"str"}$qqq %{10}qq %{ "abc" > `%{0+2}` } `
  return stest + `end%{
  33*2
  }`
}
===== str$qqq 10qq true end66
run str {
  str s = `a%{`b`}c`
  return s
}
===== abc
run str { 
  str stest = "те\nст `stri\"ng`
 line"
  stest += " ooops\u263a "
  return stest + "" + "finish"
}
===== те\nст `stri"ng`\n line ooops☺ finish
run str { 
  str test = `тест`
  str stemp = str(`тест` == test)
  return (stemp += str(test<`auto`)) + str(test!=`Тест`) + str(int( `aB`>=`aa`)) + 
         str(int(`-234`) == -234) + str(int( int(`0xfF`) <= 255 )) + str(bool(0))
}
===== truefalsetrue0true1false
run str { 
  str a b c
  c = b = `B`
  a = `A`
  c += `c`
  return c + b + a
}
===== BcBA
func mystr str {
  return ?(true, `f`, `g`) + ?(false, `d`, `e`)
}

run str {
  str ret = `a`
  return mystr() + ret + ?(true, `b`, `c`)
} 
===== feab
const : Q = "macro"
func a str : return "Afunc"
func b str : return "B" + "Afunc" + "macro" + "B"
func c str : return Q + a()
run str { 
  return b() + c() + "Cfunc"
}
===== BAfuncmacroBmacroAfuncCfunc
run str { 
  str stemp = ```begin end```
  return `tes``t тест` + ` ` + `` + `new
 line ` + stemp
}
===== tes`t тест new\n line `begin end`
run int {
  int ТЕСт = 33
  int UNi_TECT = 22
  return ТЕСт + UNi_TECT
}
===== 55
run int { 
  int a = 1
  int b = 4
  a++
  --b
  return ++a * (--b + a++) + b-- + a + b}
===== 22
run int { 
  int a = 1
  a <<=4
  a >>=3
  a &= 0xff
  a |= 0x100
  return a^=0xffff}
===== 65277
run int { 
  int a b c
  a = 22
  c = 33;c/=3;c*=5;c%=7
  return a+=b-=10+c}
===== 6
run int { return 1+^(1-0xFE12)*2}
===== 130081
run int { return ((1<<0)+ 2 << 1+3) >> 2}
===== 12
run int { return 234/17 + 234 % 17 + 20%7 }
===== 32
run int {
  int a = 0xf0 | 1 & 0 
  return (a | 0x177) & 0x33 ^ 0x122
}
===== 273
const : A1 = 6 + 1
func f int : return A1 + 6 + A1
const { B = f() } 
const f() + IOTA { C D } 
run int { return B-10 + D }
===== 31
const : КОНСТ = 21
const IOTA + КОНСТ { A B C } 
run int { return 3*C - 2*B - A  }
===== 4
const 2*IOTA + IOTA {FIRST SECOND // comment
  /* comment */
    THIRD} 
run int { return THIRD + FIRST - SECOND }
===== 3
func myConst(int par) int : return par +3
const { MYVAL = myConst(7)*2}
run int { 
  return MYVAL + MYVAL*3
}
===== 80
const 10+23 {TEST TEST2}
run int { 
  return TEST + TEST2
}
===== 66
const {
MY_PAR = (100000 + CYCLE)/10000}
run int { 
  return MY_PAR
}
===== 1610
run int { 
  return 2*DEPTH + 33
}
===== 2033
run int { 
   return 1+ ?(5>0, 22*3, 5/0) - ?(3==2, 
      7/0, ?(
       true, (3+4)*5, 0))
}
===== 32
run int { if 1+3==4 || 100/0 == 1 {
    if true && 50>12 && 34==23 {
      return 8
    }
    if 10 != 10 || 5<3 || 7==7 {return 9}
    return 10
}
return 0
}
===== 9
run bool { return (1==1 || 1/0==0 || 2/0==0) && 10==99 && 5/0==0}
===== false
run bool { return 8==8 && 100!=99 && 6<20}
===== true
run bool { return 8==9 || false || 100!=100}
===== false
run bool { return true || false && 10<5 || 7>0}
===== true
func factorial(int i) int {
  if i <= 1 {return 1}
  return i*factorial(i-1)
}
run int { return factorial(10)}
===== 3628800
run int { 
  int i; while i<0x10 {i = i+1};return i 
}
===== 16
run int { 
  int i = 67+89
  int k = i+10
  return i-k
}
===== -10
run int { 
  int i
  bool b
  if b=!b {i=7}
  return i
}
===== 7
run int { 
  int i j k
  i = j = 5+(k=60/5)*2
  return (k+j)*2 + i
}
===== 111
func param(int par) int {par=par+23;return par}
run int { 
  return param(8)
}
===== 31
func ifelse(int par) int {
  if -par == 10 {
    return 100
  } elif par < 0 { return 2 } 
  elif par <= 2 { return 3
  } elif par > 89 { return 4 } elif par >= 83 {
    return 5
  } 
  else { return par + 7 }
  return 200
}
run int { 
  return ifelse(-10) + ifelse(-5) + ifelse(2) + 
     ifelse(83) + ifelse(100)+ifelse(10)
}
===== 131
run int { 
  if true {
     if !true { return 77 } else {
     if 10==-(-10) { if 7!=8 {return 99}
  }}}
  return 0
}
===== 99
func name(int itype inext, int third) int {
  return (itype+inext)*third
}
func name(int par ipar) int {
  return par+ipar
}
func name(int itype) int {
  return itype*2
}
run int { 
  return name(2) + name(3, 7) + name(1,2,4)
}
===== 26
func name() int {
  return 5
}
func name(int itype) int {
  return itype+2
}
run int { 
  return name(101)*name()
}
===== 515
func test int : return 8
run int { 
  return (test() + test() + 4)/( test()-4 ) 
}
===== 5
run int { 
  if true {
    34
    return 12/4+1
  }
  return 0
}
===== 4
run char { 
  return 'A'
}
===== 65
run bool { 
  return true
}
===== true
run int { 
  /* return 100 */
  return 10 + /*test*/ 20 /**test**/ + /*
  comment
   */ 17 /*Comments*/
}
/* comment */
===== 47
// comment
run int { 
  // return 100
  return 10 +  // Comments
   20 // Comments
  return 22
}
// comment
===== 30
run int 
{ 
  -10
  ()
  Add(10,20)
  return 78
}
===== 78
run int { return Add(10, 5)+Mul( 1, 20) +Sub(Mul(7,Div(121,Add(1,1)+ 9)), Sign(3))-10}
===== 105
run int { return Add(Sign(-10), 67+33)}
===== 110
run int { return 2*    
4-  
    -(57 
      - 0xaa)*
    2}
===== -218

run int { return 3*(45-(30+2)/(6-((2 + 2)*2 - 4)))}
===== 87
run int { return 5+(45-30)*(1+3)/(6-1-1) + 10}
===== 30
run int { return 9-5 + 2*6/4 }
===== 7
run int { return 10+34/2 - -6*3 }
===== 45
run int { return -0XaB }
===== -171
run { -(-200) }
===== <nil>
run {}
===== <nil>
run {return}
===== <nil>
run int {return -2345780}
===== -2345780
run int {return 9134578011789}
===== 9134578011789
run int {return 2345780}
===== 2345780
run int {return 77}
===== 77
run int {return 0647}
===== 423
//const 2*IOTA + IOTA {FIRST SECOND // comment
  /* comment */
//    THIRD} 
run int { return 3 }//THIRD + FIRST - SECOND }
===== 3