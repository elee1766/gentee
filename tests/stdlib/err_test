run map.obj {
  obj o = "string"
  return map(o)
}
===== [3:10] obj is not map
run arr.obj {
  obj o = 2
  return arr(o)
}
===== [3:10] obj is not array
func ok {
    exit(7)
}
run {
  try {
    ok()
  } catch err : exit(ErrID(err) + 1)
} 
===== 8
func sub(str par) str {
  local inner str {
    if par == "ok" : exit(5)
    return "success"
  }
  return "ok \{inner()} \{par}"
}
func f str : return sub("ok")
run str {
  return f()
}
===== 5
run str {
  for i in 1..100 {
     if i== 50 : exit(33)
  }
  return `ok result`
}
===== 33
run obj {
  obj o = 2
  return item(o, 1)
}
===== [3:10] value of the object has wrong type
run obj {
  obj o = 2
  return item(o, `key`)
}
===== [3:10] value of the object has wrong type
run obj {
  arr a = {`1`, `2`}
  obj o = a
  return o[`key`]
}
===== [4:12] value of the object has wrong type
run {
  obj o = 5
  o[1] = 10
}
===== [3:5] index out of range
run {
  obj o
  o[1]
}
===== [3:5] value of the object has wrong type
run int {
  obj o
  return int(o)
}
===== [3:10] value of the object has wrong type
run obj {
  map.set s
  s[`1`] = set(`111001`)
  return obj(s)
}
===== [4:10] type is incompatible to object
run bool {
  obj o
  return bool(o)
}
===== [3:10] obj is undefined (nil)
run {
   go {
     WaitGroup(10)
   }
   sleep(200)
}
===== [3:6] WaitGroup must be called in the main thread
run {
  WaitGroup(1)
  go {
    WaitAll()
  }
  WaitAll()
}
===== [4:5] WaitAll must be called in the main thread
run {
  WaitGroup(1)
  WaitDone()
}
===== [3:3] WaitDone cannot be called in the main thread
run { 
  WaitGroup(-1)
}
===== [2:3] invalid value of parameter(s)
run str { 
  sval #= `0`
  WaitGroup(1)
  go (ind: 1) {
      str val = #sval
      val[ind] = '1'
      CtxSet(`sval`, val)
      WaitDone()
  }
  WaitAll()
  return #sval
}
===== [6:11] index out of range
run {
  map smap = {`1`:`1`, `2`:`2`}
  Key(smap, 3)
}
===== [3:3] index out of range
run {
  arr astr = {`1`, `2`}
  Slice(astr, 0, 24)
}
===== [3:3] invalid value of parameter(s)
run {
  arr astr = {`1`, `2`}
  arr.int aint
  aint += astr
}
===== [4:8] function AssignAdd(arr.int, arr.str) has not been found
run {
  arr astr = {`1`, `2`}
  arr.int aint
  aint = Reverse(astr)
}
===== [4:8] function Assign(arr.int, arr.str) has not been found
run {
  arr ai
  IsKey(ai, `100`)
}
===== [3:3] function IsKey(arr.str, str) has not been found
run {
  go(i:100) { str s = i + `OK`}
}
===== [2:25] function Add(int, str) has not been found
run str {
  time t &= ParseTime(`MMM D, YYYY`, `2019/05/28`)
  return Format(`YY/MM/DD HH:mm:ss zz`, UTC(t))
}
===== [2:13] parsing time "2019/05/28" as "Jan 2, 2006": cannot parse "2019/05/28" as "Jan"
run {
  arr.int a1 = {0, 45, -45}
  set s1 = set(a1)
}
===== [3:12] index out of range
run {
  set s1
  UnSet(s1, 100000001)
}
===== [3:3] index out of range
run str {
  set s &= {7, 5, `8`, 1}
  return str(s)
}
===== [2:19] wrong type, expecting int type
run {
  set s1 &= set(`01010ar`)
}
===== [2:13] invalid value of parameter(s)
run {
  set s1
  s1[200000000] = true
}
===== [3:6] index out of range
run str {
    CtxSet(`a`, `#b#`)
    CtxSet(`b`, `#c#`)
    CtxSet(`c`, `#a#`)
    return Ctx(`#c#`)
}
===== [5:12] c key refers to itself
run str {
  return CtxSet(`This is a string very long string very very long string key 
  This is a string very long string very very long string key `, 10)
}
===== [2:10] key length is longer than 64 characters
run arr.arr.str {
  return FindRegExp(`This is a string`, `q)`)
}
===== [2:10] error parsing regexp: unexpected ): `q)`
run str {
  return ReplaceRegExp(`This is a string`, `qq(.`, `OK`)
}
===== [2:10] error parsing regexp: missing closing ): `qq(.`
run bool {
  return Match(`OK`, `qq\o`)
}
===== [2:10] error parsing regexp: invalid escape sequence: `\o`
run {
  if true {
      error(77, `1. %s - %d`, `тест`, 70+7)
  }
}
===== [3:7] 1. тест - 77
func myerr(int code) {
  error(code, `My error text`)
}
run {
  myerr(1001)
}
===== [2:3] My error text
run {
  str s
  s = Substr(`test`, 6, -4)
}
===== [3:7] invalid value of parameter(s)
run {
  str s
  s = Substr(`ooops`, 3, -6)
}
===== [3:7] invalid value of parameter(s)
run {
  str s = Substr(`ooops`, 4, 5)
}
===== [2:11] invalid value of parameter(s)
run {
  arr.map a
  Sort(a)
}
===== [3:3] function Sort(arr.map.str) has not been found