run str {
  arr a = {`abc`, `def`, `ghi`}
  map b = {`first`:`012`, `second`:`345`}
  obj o = a
  obj m = b
  o[1] = 1
  m[`third`] = 88
  b[`first`] = `67`
  o += obj(b)
  return str(item(o, 1).int(777)) + str(item(m, `third`).int(111)) + item(m, `first`).str(``) + 
       item(o, 3).item(`first`).str(`-`)
}
===== 18801267
run str {
  arr a = {`abc`, `def`, `ghi`}
  obj o2
  obj o = a
  return item(o, 0).str(`ooops`) + item(o, 3).str(`none`) + item(o2, 3).str(`unknown`)
}
===== abcnoneunknown
run str {
  map m1 = {`a`:`1`, `b`:`2`, `c`:`3`}
  obj o = m1
  return item(o, `b`).str(`ooops`) + item(o, `d`).str(`none`)
}
===== 2none
run str {
  obj o1 = 23.98
  obj o2 = 33
  obj o3 = `test`
  obj o4 o5 o6
  str s = "\{ float(o1, 2.0)} \{int(o2,3)} \{str(o3, `aaa`)}" 
  return s + " \{float(o4, 3.0)} \{int(o5,7)} \{str(o6, `end`)}"
}
===== 23.98 33 test 3 7 end
run float {
  obj o1 = 23.987
  obj o2 = 33
  obj o3 = `124.013`
  return float(o1) + float(o2) + float(o3)
}
===== 181
run int {
  arr.int a1 = {2, 7, 8}
  map.int m1 = {`a`:1, `b`:2, `c`:3, `d`:4}
  obj o1 = a1
  obj o2 = m1
  return int(o1[2]) + int(o2[`c`]) + int(o2[`d`]) + int(o1[1]) + int(o2[0])
}
===== 23
run int {
  arr.map.int a1 = {{`a`:1, `b`:2}, {`c`:3, `d`:4}}
  obj o1 = a1
  int ret = *o1
  for v, i in o1 {
    for mv, j in v {
      ret += (3-j) * int(mv) + i
    }
  }
  return ret
}
===== 28
run obj {
  arr.arr.int a1 = {{0, 7}, {8, 9, 10}}
  map.map.int m1 = {`e`:{`a`:1, `b`:2}, `f`:{`c`:3, `d`:4}}
  obj o1 = a1
  obj o2 = m1
  arr.obj ret = {o1, o2}
  a1[0][0] = 77
  return obj(ret)
}
===== [[[0 7] [8 9 10]] map[e:map[a:1 b:2] f:map[c:3 d:4]]]
run arr.obj {
  obj o1 = 123
  obj o2 = 7.65
  obj o3 = `the end`
  obj o4 = 1==1
  arr.obj ret = {o1, o2, o3, o4}
  return ret
}
===== [123 7.65 the end true]
run obj {
  arr.map.int a1 = {{`a`:1, `b`:2}, {`c`:3, `d`:4}}
  map.arr.str m1 = {`e`:{`7`, `8`}, `f`:{`9`, `10`}}
  arr.obj ret = {obj(a1), obj(m1)}
  m1[`f`] += `11`
  return obj(ret)
}
===== [[map[a:1 b:2] map[c:3 d:4]] map[e:[7 8] f:[9 10]]]
run str {
  obj o1 = obj(10)
  obj o2 &= o1
  obj o3 = o1
  o1 = obj(`ok`)
  return `%{o1} %{o2} %{o3}`
}
===== ok ok 10
run str {
  obj o
  return `%{IsNil(o)} %{IsNil(obj(34))} %{Type(o)} %{Type(obj(true))} %{Type(obj(`me`))}` 
}
===== true false nil bool str
run arr.obj {
  arr.obj ret = {obj(-10), obj(true), obj(`my string`), obj(0.333)}
  if bool(ret[1]) {
    ret += obj(7)
  }
  if ret[3]? {
    ret += obj(23.21)
  }
  return ret
}
===== [-10 true my string 0.333 7 23.21]
run obj {
  obj o
  return o
}
===== nil